<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的学习记录</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-14T17:40:55.095Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zhou Jiaqi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++的基本类型</title>
    <link href="http://example.com/2022/04/14/C-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2022/04/14/C-%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-04-14T12:36:09.000Z</published>
    <updated>2022-04-14T17:40:55.095Z</updated>
    
    <content type="html"><![CDATA[<p>在C++中，内置了许多的基本类型，接下来我将逐一介绍这些类型</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>为了更好的方便讲解，这里先简单介绍C++中的输出 <code>cout&lt;&lt;</code> ,输入 <code>cin&gt;&gt;</code> 。</p><h3 id="输出cout"><a href="#输出cout" class="headerlink" title="输出cout"></a>输出<code>cout</code></h3><p>该对象的作用是将数据显示到屏幕上<br>注意箭头<strong>朝左</strong><br><code>cout&lt;&lt;</code></p><h3 id="输入cin"><a href="#输入cin" class="headerlink" title="输入cin"></a>输入<code>cin</code></h3><p>该对象的作用是将从键盘读取的数据存入变量中<br>注意箭头<strong>朝右</strong><br><code>cin&gt;&gt;</code></p><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h2><p>C++中整型指的是整数类型，其中包括<strong>short,int,long,long long</strong>这几种。它们之间的区别在于能表示的范围不同：<br><strong>short</strong> 的范围为-32768<del>+32767<br><strong>unsigned short</strong> (无符号版本) 的范围为0</del>65535<br><strong>int</strong> 的范围为-2147483648<del>2147483647<br><strong>unsigned int</strong>(无符号版本) 的范围为0</del>2^32-1<br><strong>long</strong> 的范围为-2^31<del>(2^31-1)<br><strong>unsigned long</strong>(无符号版本) 的范围为0</del>(2^32-1)<br><strong>int</strong> 的范围为-922 3372 0368 5477 5808 ~ 922 3372 0368 5477 5807<br><strong>unsigned int</strong>(无符号版本) 的范围为0 ~ 1844 6744 0737 0955 1615</p><p>在平常的编程中，我们最常使用的是int类型的</p><h2 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h2><p>平常我们数学中的小数在计算机中用浮点型来表示。<br>浮点型分<strong>float,double</strong>两种，它们之间的区别是精度不同<br><strong>float</strong>保证了6<del>7位有效位<br><strong>double</strong>保证了15</del>16位有效位</p><h2 id="3-字符与字符串"><a href="#3-字符与字符串" class="headerlink" title="3.字符与字符串"></a>3.字符与字符串</h2><p>字符是如’a’,’b’…这种单个字母或符号的类型，用<strong>char</strong>来表示。</p><p>在C++中，字符串的创建有两种方式，一种是声明一个<strong>char类型的数组</strong>,另一种则是使用<em>string头文件</em>中定义的类型<strong>string</strong>。<br>这里推荐使用string来存储字符串。</p><h2 id="4-布尔型"><a href="#4-布尔型" class="headerlink" title="4.布尔型"></a>4.布尔型</h2><p>该类型只有两个选项:true false</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">short a=9;</span><br><span class="line">cout&lt;&lt;a;</span><br><span class="line">int b=3333;</span><br><span class="line">cout&lt;&lt;a;</span><br><span class="line">long c=9;</span><br><span class="line">cout&lt;&lt;c;</span><br><span class="line">long long d=3333;</span><br><span class="line">cout&lt;&lt;d;</span><br><span class="line">double e=9.9;</span><br><span class="line">cout&lt;&lt;e;</span><br><span class="line">float f=9.333;</span><br><span class="line">cout&lt;&lt;f;</span><br><span class="line">char g=&#x27;f&#x27;;</span><br><span class="line">cout&lt;&lt;g;</span><br><span class="line">string h=&quot;dddd&quot;;</span><br><span class="line">cout&lt;&lt;h;</span><br></pre></td></tr></table></figure><p>上诉代码是各种类型变量的声明，string类型使用的话需要包含string头文件<br>如果不知道如何引入头文件，请<a href="https://zhoujiaqi30.github.io/2022/04/14/c-%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BC%80%E5%A7%8B/">点击这里</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在C++中，内置了许多的基本类型，接下来我将逐一介绍这些类型&lt;/p&gt;
&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h2&gt;&lt;p&gt;为了更好的方便讲解，这里先简单介绍C++中的输出</summary>
      
    
    
    
    <category term="C++基础" scheme="http://example.com/categories/C-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>c++编程的开始</title>
    <link href="http://example.com/2022/04/14/c-%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>http://example.com/2022/04/14/c-%E7%BC%96%E7%A8%8B%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2022-04-14T07:07:37.000Z</published>
    <updated>2022-04-14T16:50:09.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-的经典案例"><a href="#C-的经典案例" class="headerlink" title="C++的经典案例"></a>C++的经典案例</h2><p><img src="/../images/Helloworld.png"><br>上面这张图是一个简单C++程序的构成，它的输出结果如下图所示：<br><img src="/../images/h_debug.png"><br>是不是感觉到很神奇？<br>接下来我们逐一了解每个部分的作用</p><h2 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1.头文件"></a>1.头文件</h2><p><img src="/../images/head.png"><br>在上述图片中， ，这一句的作用是为了引入一个文件，它是我们写C++程序必不可少的一个部分<br>我们在这称它为头文件（如<strong>iostream</strong>）。<br>在头文件中包涵了我们使用的方法(如输入，输出函数)，如果我们没有包含头文件，编译器会报出“<em><strong>为找到xxx（方法）的定义</strong></em>”。</p><h3 id="头文件的风格"><a href="#头文件的风格" class="headerlink" title="头文件的风格"></a>头文件的风格</h3><p>在C++中，头文件有着C风格和C++风格的不同，这俩者在功能上是没有区别的，只不过在引入的时候名字有所不同。<br>下面将列出两种风格的常用头文件：</p><table><thead><tr><th><strong>C</strong></th><th><strong>C++</strong></th></tr></thead><tbody><tr><td>&lt;assert.h&gt;</td><td>cassert</td></tr><tr><td>&lt;ctype.h&gt;</td><td>cctype</td></tr><tr><td>&lt;errno.h&gt;</td><td>cerrno</td></tr><tr><td>&lt;limits.h&gt;</td><td>climits</td></tr><tr><td>&lt;math.h&gt;</td><td>cmath</td></tr><tr><td>&lt;setjmp.h&gt;</td><td>csetjmp</td></tr><tr><td>&lt;signal.h&gt;</td><td>csignal</td></tr><tr><td>&lt;stdarg.h&gt;</td><td>cstdarg</td></tr><tr><td>&lt;stdbool.h&gt;</td><td>null</td></tr><tr><td>&lt;stddef.h&gt;</td><td>cstddef</td></tr><tr><td>&lt;stdint.h&gt;</td><td>cstdint</td></tr><tr><td>&lt;stdio.h&gt;</td><td>cstdio</td></tr><tr><td>&lt;stdlib.h&gt;</td><td>cstdlib</td></tr><tr><td>&lt;string.h&gt;</td><td>cstring</td></tr><tr><td>&lt;time.h&gt;</td><td>ctime</td></tr><tr><td><em><strong>此表只是为了演示两者风格区别</strong></em></td><td></td></tr></tbody></table><h2 id="2-命名空间"><a href="#2-命名空间" class="headerlink" title="2.命名空间"></a>2.命名空间</h2><p><img src="/../images/namespace.png"><br>命名空间的这一概念是C与C++的一大区别，现在来简单说明一下这个概念：<br>xx学校x年级有俩名学生，他们的名字都是叫 <em>小明</em> ，那我们如何分辨哪个小明才是我们所想的那个小明呢？<br>这时的我们，就可以通过班级来分辨。<br>在上诉例子中，班级的作用就相当于命名空间，将两个同名的对象分开。</p><p>在c++中，所有的头文件都使用了命名空间。</p><h2 id="3-main函数"><a href="#3-main函数" class="headerlink" title="3.main函数"></a>3.main函数</h2><p><img src="/../images/main.png"><br><strong>main</strong> 函数我们称之为主函数，我们可以在这里面实现我们想要的功能。<br>如上图中的 <code>cout&lt;&lt;&quot;Hello World!&quot;;</code><br>该代码的作用是向屏幕中输出<em>hello world</em>这一串字符</p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>1.C++的执行顺序是从上到下<br>2.对于C++来说，一条语句结束的标准是**;**的出现，但是也有一些情况不需要。<br>  如 if,for…这些。<br>3.在刚开始的学习过程中，我们不需要见到什么就要完全钻明白，这是对时间的一种浪费。<br>  有些东西的理解需要时间和技术的沉淀。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-的经典案例&quot;&gt;&lt;a href=&quot;#C-的经典案例&quot; class=&quot;headerlink&quot; title=&quot;C++的经典案例&quot;&gt;&lt;/a&gt;C++的经典案例&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../images/Helloworld.png&quot;&gt;&lt;br&gt;上面这张图是一</summary>
      
    
    
    
    <category term="C++基础" scheme="http://example.com/categories/C-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
    <category term="编程" scheme="http://example.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
